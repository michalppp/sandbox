package com.galexis.configdb;
// Generated Sep 6, 2013 10:20:44 AM by Hibernate Tools 3.6.0


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * FieldAccessor generated by hbm2java
 */
@Entity
@Table(name="FieldAccessor"
    ,catalog="integrationConfigDB"
)
public class FieldAccessor  implements java.io.Serializable {


     private int pk;
     private FieldAccessorDataStoreField fieldAccessorDataStoreField;
     private Metadata metadata;
     private char direction;
     private String defaultValue;
     private String constValue;
     private String expression;
     private Set<DataMapping> dataMappingsForSourceFieldAccessorPk = new HashSet<DataMapping>(0);
     private Set<DataMapping> dataMappingsForDestinationFieldAccessorPk = new HashSet<DataMapping>(0);

    public FieldAccessor() {
    }

	
    public FieldAccessor(int pk, Metadata metadata, char direction) {
        this.pk = pk;
        this.metadata = metadata;
        this.direction = direction;
    }
    public FieldAccessor(int pk, FieldAccessorDataStoreField fieldAccessorDataStoreField, Metadata metadata, char direction, String defaultValue, String constValue, String expression, Set<DataMapping> dataMappingsForSourceFieldAccessorPk, Set<DataMapping> dataMappingsForDestinationFieldAccessorPk) {
       this.pk = pk;
       this.fieldAccessorDataStoreField = fieldAccessorDataStoreField;
       this.metadata = metadata;
       this.direction = direction;
       this.defaultValue = defaultValue;
       this.constValue = constValue;
       this.expression = expression;
       this.dataMappingsForSourceFieldAccessorPk = dataMappingsForSourceFieldAccessorPk;
       this.dataMappingsForDestinationFieldAccessorPk = dataMappingsForDestinationFieldAccessorPk;
    }
   
     @Id 

    
    @Column(name="PK", unique=true, nullable=false)
    public int getPk() {
        return this.pk;
    }
    
    public void setPk(int pk) {
        this.pk = pk;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="FieldAccessor_DataStoreFieldPK")
    public FieldAccessorDataStoreField getFieldAccessorDataStoreField() {
        return this.fieldAccessorDataStoreField;
    }
    
    public void setFieldAccessorDataStoreField(FieldAccessorDataStoreField fieldAccessorDataStoreField) {
        this.fieldAccessorDataStoreField = fieldAccessorDataStoreField;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="MetadataPK", nullable=false)
    public Metadata getMetadata() {
        return this.metadata;
    }
    
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    
    @Column(name="Direction", nullable=false, length=1)
    public char getDirection() {
        return this.direction;
    }
    
    public void setDirection(char direction) {
        this.direction = direction;
    }

    
    @Column(name="DefaultValue")
    public String getDefaultValue() {
        return this.defaultValue;
    }
    
    public void setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
    }

    
    @Column(name="ConstValue")
    public String getConstValue() {
        return this.constValue;
    }
    
    public void setConstValue(String constValue) {
        this.constValue = constValue;
    }

    
    @Column(name="Expression", length=1024)
    public String getExpression() {
        return this.expression;
    }
    
    public void setExpression(String expression) {
        this.expression = expression;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="fieldAccessorBySourceFieldAccessorPk")
    public Set<DataMapping> getDataMappingsForSourceFieldAccessorPk() {
        return this.dataMappingsForSourceFieldAccessorPk;
    }
    
    public void setDataMappingsForSourceFieldAccessorPk(Set<DataMapping> dataMappingsForSourceFieldAccessorPk) {
        this.dataMappingsForSourceFieldAccessorPk = dataMappingsForSourceFieldAccessorPk;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="fieldAccessorByDestinationFieldAccessorPk")
    public Set<DataMapping> getDataMappingsForDestinationFieldAccessorPk() {
        return this.dataMappingsForDestinationFieldAccessorPk;
    }
    
    public void setDataMappingsForDestinationFieldAccessorPk(Set<DataMapping> dataMappingsForDestinationFieldAccessorPk) {
        this.dataMappingsForDestinationFieldAccessorPk = dataMappingsForDestinationFieldAccessorPk;
    }




}



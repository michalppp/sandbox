package com.galexis.configdb;
// Generated Sep 6, 2013 10:20:44 AM by Hibernate Tools 3.6.0


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

/**
 * MessageTypeDefinition generated by hbm2java
 */
@Entity
@Table(name="MessageTypeDefinition"
    ,catalog="integrationConfigDB"
    , uniqueConstraints = @UniqueConstraint(columnNames={"Name", "Version", "PartnerGroupPK"}) 
)
public class MessageTypeDefinition  implements java.io.Serializable {


     private Integer pk;
     private int version;
     private Sqlstatement sqlstatement;
     private BackendResource backendResource;
     private StartTaskContentElement startTaskContentElement;
     private PartnerGroup partnerGroup;
     private Metadata metadata;
     private String name;
     private int state;
     private String partner;
     private int activeLevel;
     private boolean selectable4jobDefinition;
     private boolean selectable4contractorMail;
     private Set<ConfigurationHeaderMessageTypeDefinition> configurationHeaderMessageTypeDefinitions = new HashSet<ConfigurationHeaderMessageTypeDefinition>(0);
     private Set<HandlerMappingConfiguration> handlerMappingConfigurations = new HashSet<HandlerMappingConfiguration>(0);
     private Set<StartTaskContentAttributeValue> startTaskContentAttributeValues = new HashSet<StartTaskContentAttributeValue>(0);
     private Set<MsgTypeDef2msgTypeDef> msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk = new HashSet<MsgTypeDef2msgTypeDef>(0);
     private Set<MappingConfiguration> mappingConfigurations = new HashSet<MappingConfiguration>(0);
     private Set<TaskMsgType2msgType> taskMsgType2msgTypes = new HashSet<TaskMsgType2msgType>(0);
     private Set<MsgTypeDef2msgTypeDef> msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk = new HashSet<MsgTypeDef2msgTypeDef>(0);

    public MessageTypeDefinition() {
    }

	
    public MessageTypeDefinition(PartnerGroup partnerGroup, Metadata metadata, String name, int state, int activeLevel, boolean selectable4jobDefinition, boolean selectable4contractorMail) {
        this.partnerGroup = partnerGroup;
        this.metadata = metadata;
        this.name = name;
        this.state = state;
        this.activeLevel = activeLevel;
        this.selectable4jobDefinition = selectable4jobDefinition;
        this.selectable4contractorMail = selectable4contractorMail;
    }
    public MessageTypeDefinition(Sqlstatement sqlstatement, BackendResource backendResource, StartTaskContentElement startTaskContentElement, PartnerGroup partnerGroup, Metadata metadata, String name, int state, String partner, int activeLevel, boolean selectable4jobDefinition, boolean selectable4contractorMail, Set<ConfigurationHeaderMessageTypeDefinition> configurationHeaderMessageTypeDefinitions, Set<HandlerMappingConfiguration> handlerMappingConfigurations, Set<StartTaskContentAttributeValue> startTaskContentAttributeValues, Set<MsgTypeDef2msgTypeDef> msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk, Set<MappingConfiguration> mappingConfigurations, Set<TaskMsgType2msgType> taskMsgType2msgTypes, Set<MsgTypeDef2msgTypeDef> msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk) {
       this.sqlstatement = sqlstatement;
       this.backendResource = backendResource;
       this.startTaskContentElement = startTaskContentElement;
       this.partnerGroup = partnerGroup;
       this.metadata = metadata;
       this.name = name;
       this.state = state;
       this.partner = partner;
       this.activeLevel = activeLevel;
       this.selectable4jobDefinition = selectable4jobDefinition;
       this.selectable4contractorMail = selectable4contractorMail;
       this.configurationHeaderMessageTypeDefinitions = configurationHeaderMessageTypeDefinitions;
       this.handlerMappingConfigurations = handlerMappingConfigurations;
       this.startTaskContentAttributeValues = startTaskContentAttributeValues;
       this.msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk = msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk;
       this.mappingConfigurations = mappingConfigurations;
       this.taskMsgType2msgTypes = taskMsgType2msgTypes;
       this.msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk = msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="PK", unique=true, nullable=false)
    public Integer getPk() {
        return this.pk;
    }
    
    public void setPk(Integer pk) {
        this.pk = pk;
    }

    @Version
    @Column(name="Version", nullable=false)
    public int getVersion() {
        return this.version;
    }
    
    public void setVersion(int version) {
        this.version = version;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="SQLStatementPK")
    public Sqlstatement getSqlstatement() {
        return this.sqlstatement;
    }
    
    public void setSqlstatement(Sqlstatement sqlstatement) {
        this.sqlstatement = sqlstatement;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="BackendResourcePK")
    public BackendResource getBackendResource() {
        return this.backendResource;
    }
    
    public void setBackendResource(BackendResource backendResource) {
        this.backendResource = backendResource;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="StartTaskContentElementPK")
    public StartTaskContentElement getStartTaskContentElement() {
        return this.startTaskContentElement;
    }
    
    public void setStartTaskContentElement(StartTaskContentElement startTaskContentElement) {
        this.startTaskContentElement = startTaskContentElement;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="PartnerGroupPK", nullable=false)
    public PartnerGroup getPartnerGroup() {
        return this.partnerGroup;
    }
    
    public void setPartnerGroup(PartnerGroup partnerGroup) {
        this.partnerGroup = partnerGroup;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="MetadataPK", nullable=false)
    public Metadata getMetadata() {
        return this.metadata;
    }
    
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    
    @Column(name="Name", nullable=false)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    
    @Column(name="State", nullable=false)
    public int getState() {
        return this.state;
    }
    
    public void setState(int state) {
        this.state = state;
    }

    
    @Column(name="Partner", length=20)
    public String getPartner() {
        return this.partner;
    }
    
    public void setPartner(String partner) {
        this.partner = partner;
    }

    
    @Column(name="ActiveLevel", nullable=false)
    public int getActiveLevel() {
        return this.activeLevel;
    }
    
    public void setActiveLevel(int activeLevel) {
        this.activeLevel = activeLevel;
    }

    
    @Column(name="Selectable4JobDefinition", nullable=false)
    public boolean isSelectable4jobDefinition() {
        return this.selectable4jobDefinition;
    }
    
    public void setSelectable4jobDefinition(boolean selectable4jobDefinition) {
        this.selectable4jobDefinition = selectable4jobDefinition;
    }

    
    @Column(name="Selectable4ContractorMail", nullable=false)
    public boolean isSelectable4contractorMail() {
        return this.selectable4contractorMail;
    }
    
    public void setSelectable4contractorMail(boolean selectable4contractorMail) {
        this.selectable4contractorMail = selectable4contractorMail;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinition")
    public Set<ConfigurationHeaderMessageTypeDefinition> getConfigurationHeaderMessageTypeDefinitions() {
        return this.configurationHeaderMessageTypeDefinitions;
    }
    
    public void setConfigurationHeaderMessageTypeDefinitions(Set<ConfigurationHeaderMessageTypeDefinition> configurationHeaderMessageTypeDefinitions) {
        this.configurationHeaderMessageTypeDefinitions = configurationHeaderMessageTypeDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinition")
    public Set<HandlerMappingConfiguration> getHandlerMappingConfigurations() {
        return this.handlerMappingConfigurations;
    }
    
    public void setHandlerMappingConfigurations(Set<HandlerMappingConfiguration> handlerMappingConfigurations) {
        this.handlerMappingConfigurations = handlerMappingConfigurations;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinition")
    public Set<StartTaskContentAttributeValue> getStartTaskContentAttributeValues() {
        return this.startTaskContentAttributeValues;
    }
    
    public void setStartTaskContentAttributeValues(Set<StartTaskContentAttributeValue> startTaskContentAttributeValues) {
        this.startTaskContentAttributeValues = startTaskContentAttributeValues;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinitionByParentMessageTypeDefinitionPk")
    public Set<MsgTypeDef2msgTypeDef> getMsgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk() {
        return this.msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk;
    }
    
    public void setMsgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk(Set<MsgTypeDef2msgTypeDef> msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk) {
        this.msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk = msgTypeDef2msgTypeDefsForParentMessageTypeDefinitionPk;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinition")
    public Set<MappingConfiguration> getMappingConfigurations() {
        return this.mappingConfigurations;
    }
    
    public void setMappingConfigurations(Set<MappingConfiguration> mappingConfigurations) {
        this.mappingConfigurations = mappingConfigurations;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinition")
    public Set<TaskMsgType2msgType> getTaskMsgType2msgTypes() {
        return this.taskMsgType2msgTypes;
    }
    
    public void setTaskMsgType2msgTypes(Set<TaskMsgType2msgType> taskMsgType2msgTypes) {
        this.taskMsgType2msgTypes = taskMsgType2msgTypes;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="messageTypeDefinitionByChildMessageTypeDefinitionPk")
    public Set<MsgTypeDef2msgTypeDef> getMsgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk() {
        return this.msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk;
    }
    
    public void setMsgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk(Set<MsgTypeDef2msgTypeDef> msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk) {
        this.msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk = msgTypeDef2msgTypeDefsForChildMessageTypeDefinitionPk;
    }




}



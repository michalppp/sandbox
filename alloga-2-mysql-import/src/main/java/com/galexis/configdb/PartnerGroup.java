package com.galexis.configdb;
// Generated Sep 6, 2013 10:20:44 AM by Hibernate Tools 3.6.0


import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * PartnerGroup generated by hbm2java
 */
@Entity
@Table(name="PartnerGroup"
    ,catalog="integrationConfigDB"
    , uniqueConstraints = @UniqueConstraint(columnNames={"Name", "BackendResourcePK"}) 
)
public class PartnerGroup  implements java.io.Serializable {


     private Integer pk;
     private BackendResource backendResource;
     private Metadata metadata;
     private String name;
     private Set<TaskMessageTypeDefinition> taskMessageTypeDefinitions = new HashSet<TaskMessageTypeDefinition>(0);
     private Set<ConfigurationValue> configurationValues = new HashSet<ConfigurationValue>(0);
     private Set<ConversionDefinition> conversionDefinitions = new HashSet<ConversionDefinition>(0);
     private Set<ValueConversion> valueConversions = new HashSet<ValueConversion>(0);
     private Set<BusinessServiceDefinition> businessServiceDefinitions = new HashSet<BusinessServiceDefinition>(0);
     private Set<DataStoreEntity> dataStoreEntities = new HashSet<DataStoreEntity>(0);
     private Set<ConditionSchema> conditionSchemas = new HashSet<ConditionSchema>(0);
     private Set<MappingDefinition> mappingDefinitions = new HashSet<MappingDefinition>(0);
     private Set<MessageTypeDefinition> messageTypeDefinitions = new HashSet<MessageTypeDefinition>(0);
     private Set<ConfigurationHeader> configurationHeaders = new HashSet<ConfigurationHeader>(0);
     private Set<ConditionDefinition> conditionDefinitions = new HashSet<ConditionDefinition>(0);
     private Set<Partner> partnersForPartnerGroupGlobalPk = new HashSet<Partner>(0);
     private Set<Partner> partnersForPartnerGroupPrivatePk = new HashSet<Partner>(0);
     private Set<Partner> partnersForPartnerGroupPublicPk = new HashSet<Partner>(0);

    public PartnerGroup() {
    }

	
    public PartnerGroup(BackendResource backendResource, Metadata metadata, String name) {
        this.backendResource = backendResource;
        this.metadata = metadata;
        this.name = name;
    }
    public PartnerGroup(BackendResource backendResource, Metadata metadata, String name, Set<TaskMessageTypeDefinition> taskMessageTypeDefinitions, Set<ConfigurationValue> configurationValues, Set<ConversionDefinition> conversionDefinitions, Set<ValueConversion> valueConversions, Set<BusinessServiceDefinition> businessServiceDefinitions, Set<DataStoreEntity> dataStoreEntities, Set<ConditionSchema> conditionSchemas, Set<MappingDefinition> mappingDefinitions, Set<MessageTypeDefinition> messageTypeDefinitions, Set<ConfigurationHeader> configurationHeaders, Set<ConditionDefinition> conditionDefinitions, Set<Partner> partnersForPartnerGroupGlobalPk, Set<Partner> partnersForPartnerGroupPrivatePk, Set<Partner> partnersForPartnerGroupPublicPk) {
       this.backendResource = backendResource;
       this.metadata = metadata;
       this.name = name;
       this.taskMessageTypeDefinitions = taskMessageTypeDefinitions;
       this.configurationValues = configurationValues;
       this.conversionDefinitions = conversionDefinitions;
       this.valueConversions = valueConversions;
       this.businessServiceDefinitions = businessServiceDefinitions;
       this.dataStoreEntities = dataStoreEntities;
       this.conditionSchemas = conditionSchemas;
       this.mappingDefinitions = mappingDefinitions;
       this.messageTypeDefinitions = messageTypeDefinitions;
       this.configurationHeaders = configurationHeaders;
       this.conditionDefinitions = conditionDefinitions;
       this.partnersForPartnerGroupGlobalPk = partnersForPartnerGroupGlobalPk;
       this.partnersForPartnerGroupPrivatePk = partnersForPartnerGroupPrivatePk;
       this.partnersForPartnerGroupPublicPk = partnersForPartnerGroupPublicPk;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="PK", unique=true, nullable=false)
    public Integer getPk() {
        return this.pk;
    }
    
    public void setPk(Integer pk) {
        this.pk = pk;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="BackendResourcePK", nullable=false)
    public BackendResource getBackendResource() {
        return this.backendResource;
    }
    
    public void setBackendResource(BackendResource backendResource) {
        this.backendResource = backendResource;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="MetadataPK", nullable=false)
    public Metadata getMetadata() {
        return this.metadata;
    }
    
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    
    @Column(name="Name", nullable=false, length=50)
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<TaskMessageTypeDefinition> getTaskMessageTypeDefinitions() {
        return this.taskMessageTypeDefinitions;
    }
    
    public void setTaskMessageTypeDefinitions(Set<TaskMessageTypeDefinition> taskMessageTypeDefinitions) {
        this.taskMessageTypeDefinitions = taskMessageTypeDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<ConfigurationValue> getConfigurationValues() {
        return this.configurationValues;
    }
    
    public void setConfigurationValues(Set<ConfigurationValue> configurationValues) {
        this.configurationValues = configurationValues;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<ConversionDefinition> getConversionDefinitions() {
        return this.conversionDefinitions;
    }
    
    public void setConversionDefinitions(Set<ConversionDefinition> conversionDefinitions) {
        this.conversionDefinitions = conversionDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<ValueConversion> getValueConversions() {
        return this.valueConversions;
    }
    
    public void setValueConversions(Set<ValueConversion> valueConversions) {
        this.valueConversions = valueConversions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<BusinessServiceDefinition> getBusinessServiceDefinitions() {
        return this.businessServiceDefinitions;
    }
    
    public void setBusinessServiceDefinitions(Set<BusinessServiceDefinition> businessServiceDefinitions) {
        this.businessServiceDefinitions = businessServiceDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<DataStoreEntity> getDataStoreEntities() {
        return this.dataStoreEntities;
    }
    
    public void setDataStoreEntities(Set<DataStoreEntity> dataStoreEntities) {
        this.dataStoreEntities = dataStoreEntities;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<ConditionSchema> getConditionSchemas() {
        return this.conditionSchemas;
    }
    
    public void setConditionSchemas(Set<ConditionSchema> conditionSchemas) {
        this.conditionSchemas = conditionSchemas;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<MappingDefinition> getMappingDefinitions() {
        return this.mappingDefinitions;
    }
    
    public void setMappingDefinitions(Set<MappingDefinition> mappingDefinitions) {
        this.mappingDefinitions = mappingDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<MessageTypeDefinition> getMessageTypeDefinitions() {
        return this.messageTypeDefinitions;
    }
    
    public void setMessageTypeDefinitions(Set<MessageTypeDefinition> messageTypeDefinitions) {
        this.messageTypeDefinitions = messageTypeDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<ConfigurationHeader> getConfigurationHeaders() {
        return this.configurationHeaders;
    }
    
    public void setConfigurationHeaders(Set<ConfigurationHeader> configurationHeaders) {
        this.configurationHeaders = configurationHeaders;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroup")
    public Set<ConditionDefinition> getConditionDefinitions() {
        return this.conditionDefinitions;
    }
    
    public void setConditionDefinitions(Set<ConditionDefinition> conditionDefinitions) {
        this.conditionDefinitions = conditionDefinitions;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroupByPartnerGroupGlobalPk")
    public Set<Partner> getPartnersForPartnerGroupGlobalPk() {
        return this.partnersForPartnerGroupGlobalPk;
    }
    
    public void setPartnersForPartnerGroupGlobalPk(Set<Partner> partnersForPartnerGroupGlobalPk) {
        this.partnersForPartnerGroupGlobalPk = partnersForPartnerGroupGlobalPk;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroupByPartnerGroupPrivatePk")
    public Set<Partner> getPartnersForPartnerGroupPrivatePk() {
        return this.partnersForPartnerGroupPrivatePk;
    }
    
    public void setPartnersForPartnerGroupPrivatePk(Set<Partner> partnersForPartnerGroupPrivatePk) {
        this.partnersForPartnerGroupPrivatePk = partnersForPartnerGroupPrivatePk;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="partnerGroupByPartnerGroupPublicPk")
    public Set<Partner> getPartnersForPartnerGroupPublicPk() {
        return this.partnersForPartnerGroupPublicPk;
    }
    
    public void setPartnersForPartnerGroupPublicPk(Set<Partner> partnersForPartnerGroupPublicPk) {
        this.partnersForPartnerGroupPublicPk = partnersForPartnerGroupPublicPk;
    }




}


